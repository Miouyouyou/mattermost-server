name: Go

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  IMAGE_NAME: myy-mattermost

jobs:

  build:
    name: Build
    runs-on: alpine-latest
    
    strategy:
      matrix:
        node-version: [ 12.x ]

    steps:
    - name: Check out code
      uses: actions/checkout@v2
      
    - name: Preparing Node ${{ matrix.node-version }} for the webclient build
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Checking out the client
      run: |
        cd .. &&
        git clone --depth 1 https://github.com/Miouyouyou/mattermost-webapp
    
    - name: Set up Go 1.13 for the server build
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Build and package the server
      run: |
        echo $PWD &&
        ls -l ../ &&
        make build build-client package &&
        mkdir -p /tmp/build &&
        cp dist/mattermost-team-linux-amd64.tar.gz /tmp/build/ &&
        echo "Done !"
    
    - name: Create an artifact with the dist dir
      uses: actions/upload-artifact@v1
      with:
        name: mattermost-build
        path: dist

    - name: Get the Docker build image
      run: |
        cd /tmp/build &&
        wget https://gist.github.com/Miouyouyou/1157f6e8f77082949fe7e1a5ee5760e7/raw/3427a8bde2b13ff2048ac4da137b858efae946bd/Dockerfile &&
        wget https://gist.github.com/Miouyouyou/1157f6e8f77082949fe7e1a5ee5760e7/raw/3427a8bde2b13ff2048ac4da137b858efae946bd/entrypoint.sh
    
    - name: Build the Docker image
      run: |
        cd /tmp/build &&
        docker build . --file Dockerfile --tag image
    
    - name: Log into registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

    - name: Push image
      run: |
        IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

        # Strip git ref prefix from version
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

        # Strip "v" prefix from tag name
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

        # Use Docker `latest` tag convention
        [ "$VERSION" == "master" ] && VERSION=latest

        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION

        docker tag image $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
